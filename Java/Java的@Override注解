Java的@Override注解
一般用途
      ·告诉读代码的人，这是一个复写的方法
      ·帮助自己检查是否正确的复写了父类中已有的方法

通俗的描述就是:
@Override是伪代码,表示重写(当然不写也可以),不过写上有如下好处:
        1、可以当注释用,方便阅读;
        2、编译器可以给你验证@Override下面的方法名是否是你父类中所有的,如果没有则报错。


[转]===========================================================================
Bruce的 一个思考

   《Thinking in java》的作者Bruce在讨论这个问题的时候，提到了一个问题就是override私有的方法的例子:

    现在我们向Fruit类中添加一个私有方法，而在Apple中尝试重写

1         @Override
2         private void grow(){
3         }


   结果编译器会提示错误,这是一个非常低级的错误,但是有时候恰恰就不会被我们发现:那就是试着重写私有方法,但是当我们去掉@Override标签的时候,编译器是不会报错的,而且可以执行。
   其实Apple中的你所谓重写的grow()方法只是一个针对于Apple本身的私有方法。完全是一个新的方法!

   这就引出了一个问题，何为复写？

   在面向对象中,只有接口的默认公有抽象方法,继承方法才有重写，私有方法不可以重写，但是又想了一下，才明白：不是不可以重写而是，根本就不存在重写私有方法的概念！
   这正是面向对象设计的初衷，私有方法本身就是为了封装在类内部，不希望别人来更改或者外部引用的，看到这里，忽然觉得，java设计的还真是不错，感觉到了思想和实现的统一。
   以前总觉得@Override标签可有可无，但没想到会引出这么多的问题，于是乎得到一个启示：认真思考每一个语法细节的意义，思行合一，文章的最后膜拜一下Bruce.
